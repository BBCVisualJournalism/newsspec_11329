colnames(quiz_permutations) <- 'permutation'
head(quiz_permutations)
nrow(quiz_permutations)
quiz_permutations$R1 <- grepl('^dcd{3,}[cd][bd]c[cd]$', quiz_permutations$permutation)
quiz_permutations$R2 <- grepl('^[abcd]{2,}a[abcd]{6,}$', quiz_permutations$permutation)
quiz_permutations$R3 <- grepl('^[abcd]{6,}c[abcd]{2,}$|^[abcd]{3,}c[abcd]{5,}$', quiz_permutations$permutation)
quiz_permutations$R4 <- grepl('^[abcd][a|b][abcd]{7,}$', quiz_permutations$permutation)
quiz_permutations$R5 <- grepl('^[abcd]{7,}d[abcd]$', quiz_permutations$permutation)
quiz_permutations$R6 <- grepl('^[abcd]{4,}[ab][abcd]{4,}$', quiz_permutations$permutation)
quiz_permutations$R7 <- grepl('^c{2,}d{3,}[cd]{2,}c[cd]$', quiz_permutations$permutation)
quiz_permutations$R8 <- grepl('^[abcd]{5,}[a|b][abcd]{3,}$|^[abcd]{6,}a[abcd]{2,}$|^[abcd]{5,}aa[abcd]{2,}$|^[abcd]{8,}b$|^[abcd]{5,}[ab]a[abcd]b$|^[abcd]{5,}[a|b][abcd]{2,}b$', quiz_permutations$permutation)
quiz_permutations$R9 <- grepl('^[abcd]{3,}a[abcd]{4,}a$|^[abcd]{3,}a[abcd]{5,}$|^[abcd]{8,}a$', quiz_permutations$permutation)
quiz_permutations$R10 <- grepl('^[abcd][a|b]a[abcd]a{2}[abcd]{3,}$|^[abcd]{3,}a[abcd]{3,}a{2,}$', quiz_permutations$permutation)
quiz_permutations$R11 <- grepl('^[abcd]d[abcd]{7,}$', quiz_permutations$permutation)
quiz_permutations$R12 <- grepl('^[abcd]{2,}[bc][abcd]{6,}$|^[ab][abcd]{8,}$|^[abcd]{3,}b[abcd]{5,}$|^[abcd]{4,}d[abcd]{4,}$|^[abcd]{4,}c[abcd]{4,}$|^[abcd]{7,}b[abcd]$', quiz_permutations$permutation)
quiz_permutations$R13 <- grepl('^[abcd]{7,}a[abcd]$', quiz_permutations$permutation)
head(quiz_permutations)
rownames(quiz_permutations) <- quiz_permutations$permutation
quiz_permutations <- quiz_permutations[,-1]
sapply(quiz_permutations, class)
quiz_permutations[2:10*12:20,]
quiz_permutations[2:10*12:20,]
write(paste('var data = ',toJSON(as.data.frame(t(quiz_permutations))), ';',sep=''), 'user_response_permutations.js')
# write(toJSON(as.data.frame(t(quiz_permutations))), 'user_response_permutations.json')
quiz_permutations.matrix <- as.matrix(quiz_permutations)
head(quiz_permutations.matrix)
quiz_permutations.matrix[quiz_permutations.matrix==FALSE] <- 0
quiz_permutations.matrix[quiz_permutations.matrix==TRUE] <- 1
# alternative solution
# as.data.frame(lapply(quiz_permutations.numeric, function(x){replace(x, x==0,'false'); replace(x,x==1,'true')}))
head(quiz_permutations.matrix)
quiz_permutations.matrix <- as.data.frame(quiz_permutations.matrix)
head(quiz_permutations.matrix)
quiz_permutations.matrix$countTrue <- rowSums(quiz_permutations.matrix)
quiz_permutations.matrix$permutation <- rownames(quiz_permutations.matrix)
head(quiz_permutations.matrix)
quiz_permutations.matrix<-quiz_permutations.matrix[,c('permutation','countTrue')]
permutations <- cbind(quiz_permutations, quiz_permutations.matrix)
head(permutations)
print(paste('permutations with no response raised:', nrow(permutations[permutations$countTrue < 1,1:13])))
if (nrow(permutations[permutations$countTrue < 1,1:13]) > 0) {
write.csv(permutations[permutations$countTrue < 1,1:13], 'unmatched_permutations.csv')
}
# single response permutations
# 1016 have exactly a single match
nrow(permutations[permutations$countTrue < 2,])
singleMatchPermutations <- permutations[permutations$countTrue ==1,]
head(singleMatchPermutations)
nrow(singleMatchPermutations)
head(quiz_permutations.matrix)
singleMatchJson <- toJSON(as.data.frame(t(singleMatchPermutations[,1:13])))
singleMatchJson
write(paste('define(', singleMatchJson, ');', sep=''), '../js/spec/data/singleMatchFixture.js')
write.csv(singleMatchPermutations[,1:13], 'singleMatchDataset.csv')
#multiple response permutations
quiz_permutations$permutation <- rownames(quiz_permutations)
multipleMatchPermutations <- sqldf('SELECT * FROM quiz_permutations WHERE permutation NOT IN(SELECT permutation FROM singleMatchPermutations)')
head(quiz_permutations)
head(singleMatchPermutations)
nrow(quiz_permutations) == nrow(singleMatchPermutations) + nrow(multipleMatchPermutations)
nrow(singleMatchPermutations)
nrow(multipleMatchPermutations)
head(multipleMatchPermutations)
permutations <- multipleMatchPermutations
rownames(permutations) <- permutations[,14]
# extract a dataset for test size 100
sampleData <- permutations[sample(1:nrow(permutations), 100, replace=FALSE),]
head(sampleData)
colnames(sampleData) <- NULL
sampleJson <- toJSON(as.data.frame(t(sampleData[,1:13])))
sampleJson
write(paste('define(', sampleJson, ');', sep=''), '../js/spec/data/testFixture.js')
# question sentiments
q1 <- c('m', 'm', 'p', 'p')
q2 <- c('n', 'n', 'p', 'n')
q3 <- c('n', 'm', 'm', 'p')
q4 <- c('n', 'm', 'n', 'p')
q5 <- c('n', 'n', 'm', 'p')
q6 <- c('n', 'n', 'p', 'p')
q7 <- c('n', 'n', 'p', 'p')
q8 <- c('n', 'm', 'p', 'n')
q9 <- c('n', 'n', 'p', 'p')
sentiments <- t(data.frame(q1, q2, q3, q4, q5, q6, q7, q8, q9))
colnames(sentiments) <- c('a', 'b', 'c', 'd')
permutations$q1 <- sentiments[1,substr(permutations$permutation, 1, 1)]
permutations$q2 <- sentiments[2,substr(permutations$permutation, 2, 2)]
permutations$q3 <- sentiments[3,substr(permutations$permutation, 3, 3)]
permutations$q4 <- sentiments[4,substr(permutations$permutation, 4, 4)]
permutations$q5 <- sentiments[5,substr(permutations$permutation, 5, 5)]
permutations$q6 <- sentiments[6,substr(permutations$permutation, 6, 6)]
permutations$q7 <- sentiments[7,substr(permutations$permutation, 7, 7)]
permutations$q8 <- sentiments[8,substr(permutations$permutation, 8, 8)]
permutations$q9 <- sentiments[9,substr(permutations$permutation, 9, 9)]
head(permutations,10)
sentiments <- permutations[,15:ncol(permutations)]
head(sentiments)
sampleData <- sentiments[sample(1:nrow(sentiments), 50, replace=FALSE),]
colnames(sampleData) <- NULL
sampleData <- as.data.frame(t(sampleData))
head(sampleData)
sampleJson <- toJSON(sampleData)
sampleJson
write(paste('define(', sampleJson, ');', sep=''), '../js/spec/data/sentimentsFixture.js')
sentiments$permutation <- rownames(sentiments)
sentiments$cn <- apply(sentiments, 1, function (x) length(x[x=='n']))
sentiments$cm <- apply(sentiments, 1, function (x) length(x[x=='m']))
sentiments$cp <- apply(sentiments, 1, function (x) length(x[x=='p']))
permutations <- merge(permutations,sentiments[,10:ncol(sentiments)], by.x='permutation', by.y='permutation')
permutations$countTrue <- apply(permutations, 1, function (x) (13-length(x[x==FALSE])))
# head(permutations)
# permutations[ permutations$countTrue == 3,]
# length(x[x<0])
# head(sentiments)
# tail(testdata)
# testdata
head(permutations)
testdata <- head(permutations, 10)
apply(testdata, 1, function (x) {
val <- x[[27]]
val
})
apply(testdata, 1, function (x) {
print(length(x))
val <- x[[27]]
val
})
testdata
testdata$test <- apply(testdata, 1, function (x) {
print(length(x))
val <- x[[27]]
val
})
testdata
testfunc <- function (x) {
length(x)
}
testdata$test2 <- apply(testdata, 1, testfunc)
testdata
testfunc <- function (x) {
if (x[[27]] == 8) {
return 'eight'
} else if (x[[27]] == 7) {
return 'seven'
}
}
testdata$test2 <- apply(testdata, 1, testfunc)
testfunc <- function (x) {
if (x[[27]] == 8) {
return('eight')
} else if (x[[27]] == 7) {
return('seven')
}
}
testdata$test2 <- apply(testdata, 1, testfunc)
testdata
c(1:4)
testfunc <- function (x) {
print(x[[2]])
}
apply(testdata, 1, testfunc)
testdata <- head(permutations, 10)
apply(testdata, 1, function (x) {
print(x[[2]])
})
apply(testdata, 1, function (x) {
x[[2]]
})
apply(testdata, 1, function (x) {
x[[24]]
})
apply(testdata, 1, function (x) {
x[[24:26]]
})
apply(testdata, 1, function (x) {
paste(x[[24]],x[[25]],x[[26]], sep='')
})
apply(testdata, 1, function (x) {
paste(x[[15]],x[[16]],x[[17]], sep='')
})
grepl('^[abcd]{7,}a[abcd]$', 'abcdabcda')
grepl('^[abcd]{7,}a[abcd]$', 'abcdabada')
grepl('^[abcd]{7,}a[abcd]$', 'cccccccc')
grepl('^[abcd]{7,}a[abcd]$', 'cccccccac')
grepl('^[abcd]{7,}a[abcd]$', 'cccccccdc')
grepl('^[abcd]{7,}a[abcd]$', 'cccccccac')
head(permutations)
testdata
colnames(testdata)
head(testdata)
testdata <- head(permutations, 10)
head(testdata)
colnames(testdata)
colnames(testdata) <- NULL
head(testdata)
testdata <- head(permutations, 10)
head(testdata)
colnames(testdata) <- NULL
colnames(testdata) <- NULL
head(testdata)
colnames(testdata)
head(testdata)
testdata <- head(permutations, 10)
head(testdata)
colnames(testdata)
colnames(testdata) <- NULL
testdata <- head(permutations, 10)
colnames(testdata) <- paste('c', 1:ncol(testdata), sep='')
head(testdata)
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
if (countNegatives > 0) {
sentimentString <- paste(x[[15]],x[[16]],x[[17]],x[[18]],x[[19]],x[[20]],x[[21]],x[[22]],x[[23]])
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', sentimentString)) {
return('response8')
} else if (countNegatives > 1) {
return('response10')
} else {
return('only one negative')
}
} else {
return 'no negatives'
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
if (countNegatives > 0) {
sentimentString <- paste(x[[15]],x[[16]],x[[17]],x[[18]],x[[19]],x[[20]],x[[21]],x[[22]],x[[23]])
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', sentimentString)) {
return('response8')
} else if (countNegatives > 1) {
return('response10')
} else {
return('only one negative')
}
} else {
return('no negatives')
}
}
head(permutations)
permutations$result <- apply(permutations, 1, getResponse)
head(permutations)
nrow(permutations[ permutations$result=='response10',])
nrow(permutations[ permutations$result=='response8',])
nrow(permutations[ permutations$result=='only one negative',])
nrow(permutations[ permutations$result=='no negatives',])
nrow(permutations)
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mmmmmmmmm')
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mmmmmnmmm')
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mmmmmmpmm')
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mmmmmmnmm')
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mmmmmmnmp')
head(permutations)
sqlstatement <- 'SELECT * FROM WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"'
sqldf(sqlstatement)
sqlstatement <- 'SELECT * FROM permutations WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"'
sqldf(sqlstatement)
nrow(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"
AND q8 <> "n"'
nrow(sqldf(sqlstatement)) #11532
sqlstatement <- 'SELECT * FROM permutations WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"
AND q6 = "n"
AND q8 <> "n"'
nrow(sqldf(sqlstatement)) #11532
sqlstatement <- 'SELECT * FROM permutations WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"
AND q6 = "n"
AND q8 <> "n"'
nrow(sqldf(sqlstatement))
head(sqldf(sqlstatement))
grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mpmmmnnmn')
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mpmmmnnmn')) { print('love love love')}
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'npmmmnnmn')) { print('love love love')}
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'ppmmmnnmn')) { print('love love love')}
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mpmmmnnmn')) { print('love love love')}
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mnmmmnnmn')) { print('love love love')}
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', 'mnmmmnnmn')) { print('love love love')}
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
if (countNegatives > 0) {
sentimentString <- paste(x[[15]],x[[16]],x[[17]],x[[18]],x[[19]],x[[20]],x[[21]],x[[22]],x[[23]])
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', sentimentString)) {
response <- 'response8'
} else if (countNegatives > 1) {
response <- 'response10'
} else {
response <- 'only one negative'
}
} else {
response <- 'no negatives'
}
return(response)
}
head(permutations)
permutations$result <- apply(permutations, 1, getResponse)
sqldf('SELECT result, count(*) FROM permutations GROUP BY result ORDER BY result DESC')
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
if (countNegatives > 0) {
sentimentString <- paste(x[[15]],x[[16]],x[[17]],x[[18]],x[[19]],x[[20]],x[[21]],x[[22]],x[[23]], sep='')
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', sentimentString)) {
response <- 'response8'
} else if (countNegatives > 1) {
response <- 'response10'
} else {
response <- 'only one negative'
}
} else {
response <- 'no negatives'
}
return(response)
}
head(permutations)
permutations$result <- apply(permutations, 1, getResponse)
sqldf('SELECT result, count(*) FROM permutations GROUP BY result ORDER BY result DESC')
sqldf('SELECT result, count(*) as count, count(*) / (SELECT COUNT(*) FROM permutations), FROM permutations GROUP BY result ORDER BY result DESC')
sqldf('SELECT result, count(*) as count, count(*) / (SELECT COUNT(*) FROM permutations) as "% count" FROM permutations GROUP BY result ORDER BY result DESC')
sqldf('select count(*) from permutations')
sqldf('SELECT result, count(*) as count FROM permutations GROUP BY result ORDER BY result DESC')
sqlstatement <- 'SELECT * FROM permutations WHERE
q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"
AND q6 = "n"
AND q8 <> "n"'
nrow(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE
(q1 <> "n"
AND q2 <> "n"
AND q3 <> "n"
AND q4 <> "n"
AND q5 <> "n"
AND q6 = "n"
AND q8 <> "n")'
nrow(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE response = "only one negative"'
head(sqldf(sqlstatement))
head(permutations)
sqlstatement <- 'SELECT * FROM permutations WHERE result = "only one negative"'
head(sqldf(sqlstatement))
View(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE result = "only one negative" AND q2 <> "n"'
View(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE result = "only one negative" AND q2 <> "n" AND q3 <> "n" AND q4 <> "n"'
View(sqldf(sqlstatement))
sqlstatement <- 'SELECT * FROM permutations WHERE result = "only one negative" AND q2 <> "n" AND q3 <> "n"'
View(sqldf(sqlstatement))
View(sqldf(sqlstatement))
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
if (countNegatives > 0) {
sentimentString <- paste(x[[15]],x[[16]],x[[17]],x[[18]],x[[19]],x[[20]],x[[21]],x[[22]],x[[23]], sep='')
if (grepl('[^n]{5,}n[mnp][^n][mnp]|[^n]{5,}[mnp]n[^n][mnp]|[^n]{5,}[mnp]{2,}[^n]n', sentimentString)) {
response <- 'response8'
} else if (countNegatives > 2) {
response <- 'response10'
} else {
response <- 'only one negative'
}
} else {
response <- 'no negatives'
}
return(response)
}
permutations$result <- apply(permutations, 1, getResponse)
sqldf('SELECT result, count(*) as count FROM permutations GROUP BY result ORDER BY result DESC')
setwd("~/Sites/bbc/news/special/2015/newsspec_11329/source/data")
library(rjson)
library(sqldf)
quiz_permutations <- read.csv('user_response_permutations.csv', header=F)
colnames(quiz_permutations) <- 'permutation'
head(quiz_permutations)
nrow(quiz_permutations)
quiz_permutations$R1 <- grepl('^dcd{3,}[cd][bd]c[cd]$', quiz_permutations$permutation)
quiz_permutations$R2 <- grepl('^[abcd]{2,}a[abcd]{6,}$', quiz_permutations$permutation)
quiz_permutations$R3 <- grepl('^[abcd]{6,}b[abcd]{2,}$|^[abcd]{3,}c[abcd]{5,}$', quiz_permutations$permutation)
quiz_permutations$R4 <- grepl('^[abcd][a|b][abcd]{7,}$', quiz_permutations$permutation)
quiz_permutations$R5 <- grepl('^[abcd]{7,}d[abcd]$', quiz_permutations$permutation)
quiz_permutations$R6 <- grepl('^[abcd]{4,}[ab][abcd]{4,}$', quiz_permutations$permutation)
quiz_permutations$R7 <- grepl('^c{2,}d{3,}[cd]{2,}c[cd]$', quiz_permutations$permutation)
quiz_permutations$R8 <- grepl('^[abcd]{5,}[a|b][abcd]{3,}$|^[abcd]{6,}a[abcd]{2,}$|^[abcd]{5,}aa[abcd]{2,}$|^[abcd]{8,}b$|^[abcd]{5,}[ab]a[abcd]b$|^[abcd]{5,}[a|b][abcd]{2,}b$', quiz_permutations$permutation)
quiz_permutations$R9 <- grepl('^[abcd]{3,}a[abcd]{4,}a$|^[abcd]{3,}a[abcd]{5,}$|^[abcd]{8,}a$', quiz_permutations$permutation)
quiz_permutations$R10 <- grepl('^[abcd][a|b]a[abcd]a{2}[abcd]{3,}$|^[abcd]{3,}a[abcd]{3,}a{2,}$', quiz_permutations$permutation)
quiz_permutations$R11 <- grepl('^[abcd]d[abcd]{7,}$', quiz_permutations$permutation)
quiz_permutations$R12 <- grepl('^[abcd]{2,}[bc][abcd]{6,}$|^[ab][abcd]{8,}$|^[abcd]{3,}b[abcd]{5,}$|^[abcd]{4,}d[abcd]{4,}$|^[abcd]{4,}c[abcd]{4,}$|^[abcd]{7,}b[abcd]$', quiz_permutations$permutation)
quiz_permutations$R13 <- grepl('^[abcd]{7,}a[abcd]$', quiz_permutations$permutation)
head(quiz_permutations)
rownames(quiz_permutations) <- quiz_permutations$permutation
quiz_permutations <- quiz_permutations[,-1]
sapply(quiz_permutations, class)
quiz_permutations[2:10*12:20,]
quiz_permutations[2:10*12:20,]
write(paste('var data = ',toJSON(as.data.frame(t(quiz_permutations))), ';',sep=''), 'user_response_permutations.js')
quiz_permutations.matrix <- as.matrix(quiz_permutations)
head(quiz_permutations.matrix)
quiz_permutations.matrix[quiz_permutations.matrix==FALSE] <- 0
quiz_permutations.matrix[quiz_permutations.matrix==TRUE] <- 1
head(quiz_permutations.matrix)
quiz_permutations.matrix <- as.data.frame(quiz_permutations.matrix)
head(quiz_permutations.matrix)
quiz_permutations.matrix$countTrue <- rowSums(quiz_permutations.matrix)
quiz_permutations.matrix$permutation <- rownames(quiz_permutations.matrix)
head(quiz_permutations.matrix)
quiz_permutations.matrix<-quiz_permutations.matrix[,c('permutation','countTrue')]
permutations <- cbind(quiz_permutations, quiz_permutations.matrix)
head(permutations)
print(paste('permutations with no response raised:', nrow(permutations[permutations$countTrue < 1,1:13])))
if (nrow(permutations[permutations$countTrue < 1,1:13]) > 0) {
write.csv(permutations[permutations$countTrue < 1,1:13], 'unmatched_permutations.csv')
}
nrow(permutations[permutations$countTrue < 2,])
singleMatchPermutations <- permutations[permutations$countTrue ==1,]
head(singleMatchPermutations)
nrow(singleMatchPermutations)
head(quiz_permutations.matrix)
singleMatchJson <- toJSON(as.data.frame(t(singleMatchPermutations[,1:13])))
singleMatchJson
write(paste('define(', singleMatchJson, ');', sep=''), '../js/spec/data/singleMatchFixture.js')
write.csv(singleMatchPermutations[,1:13], 'singleMatchDataset.csv')
quiz_permutations$permutation <- rownames(quiz_permutations)
multipleMatchPermutations <- sqldf('SELECT * FROM quiz_permutations WHERE permutation NOT IN(SELECT permutation FROM singleMatchPermutations)')
head(quiz_permutations)
head(singleMatchPermutations)
nrow(quiz_permutations) == nrow(singleMatchPermutations) + nrow(multipleMatchPermutations)
nrow(singleMatchPermutations)
nrow(multipleMatchPermutations)
head(multipleMatchPermutations)
permutations <- multipleMatchPermutations
rownames(permutations) <- permutations[,14]
sampleData <- permutations[sample(1:nrow(permutations), 100, replace=FALSE),]
head(sampleData)
colnames(sampleData) <- NULL
sampleJson <- toJSON(as.data.frame(t(sampleData[,1:13])))
sampleJson
write(paste('define(', sampleJson, ');', sep=''), '../js/spec/data/testFixture.js')
# question sentiments
q1 <- c('m', 'm', 'p', 'p')
q2 <- c('n', 'n', 'p', 'n')
q3 <- c('n', 'm', 'm', 'p')
q4 <- c('n', 'm', 'n', 'p')
q5 <- c('n', 'n', 'm', 'p')
q6 <- c('n', 'n', 'p', 'p')
q7 <- c('n', 'n', 'p', 'p')
q8 <- c('n', 'm', 'p', 'n')
q9 <- c('n', 'n', 'p', 'p')
sentiments <- t(data.frame(q1, q2, q3, q4, q5, q6, q7, q8, q9))
colnames(sentiments) <- c('a', 'b', 'c', 'd')
permutations$q1 <- sentiments[1,substr(permutations$permutation, 1, 1)]
permutations$q2 <- sentiments[2,substr(permutations$permutation, 2, 2)]
permutations$q3 <- sentiments[3,substr(permutations$permutation, 3, 3)]
permutations$q4 <- sentiments[4,substr(permutations$permutation, 4, 4)]
permutations$q5 <- sentiments[5,substr(permutations$permutation, 5, 5)]
permutations$q6 <- sentiments[6,substr(permutations$permutation, 6, 6)]
permutations$q7 <- sentiments[7,substr(permutations$permutation, 7, 7)]
permutations$q8 <- sentiments[8,substr(permutations$permutation, 8, 8)]
permutations$q9 <- sentiments[9,substr(permutations$permutation, 9, 9)]
head(permutations,10)
sentiments <- permutations[,15:ncol(permutations)]
head(sentiments)
sampleData <- sentiments[sample(1:nrow(sentiments), 50, replace=FALSE),]
colnames(sampleData) <- NULL
sampleData <- as.data.frame(t(sampleData))
head(sampleData)
sampleJson <- toJSON(sampleData)
sampleJson
write(paste('define(', sampleJson, ');', sep=''), '../js/spec/data/sentimentsFixture.js')
sentiments$permutation <- rownames(sentiments)
sentiments$cn <- apply(sentiments, 1, function (x) length(x[x=='n']))
sentiments$cm <- apply(sentiments, 1, function (x) length(x[x=='m']))
sentiments$cp <- apply(sentiments, 1, function (x) length(x[x=='p']))
permutations <- merge(permutations,sentiments[,10:ncol(sentiments)], by.x='permutation', by.y='permutation')
permutations$countTrue <- apply(permutations, 1, function (x) (13-length(x[x==FALSE])))
head(permutations)
permutations$sentimentString <-
getResponse <- function (x) {
countNegatives <- x[[24]]
countMilds <- x[[25]]
countPositives <- x[[26]]
